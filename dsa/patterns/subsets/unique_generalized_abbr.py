"""
Given a word, write a function to generate all of its unique generalized abbreviations.

Generalized abbreviation of a word can be generated by replacing each substring of the word by the count of characters in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. After replacing these substrings in the actual word by the count of characters we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.

Example 1:

Input: "BAT"
Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"
Example 2:

Input: "code"
Output: "code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode", "1od1", "1o1e", "1o2", 
"2de", "2d1", "3e", "4"
"""

from collections import deque

class AbbrWord:
    def __init__(self, s, start, count):
        self.s = s
        self.start = start
        self.count = count

def unique_generalized_abbr(s):
    result = []
    wordLen = len(s)
    queue = deque()
    queue.append(AbbrWord(list(), 0, 0))

    while queue:
        abWord = queue.popleft()
        if wordLen == abWord.start:
            if abWord.count != 0:
                abWord.s.append(str(abWord.count))
            result.append("".join(abWord.s))
        else:
            queue.append(AbbrWord(list(abWord.s), abWord.start+1, abWord.count+1))

            if abWord.count != 0:
                abWord.s.append(str(abWord.count))
            print("Word: ", abWord.s)
            newWord = list(abWord.s)
            newWord.append(s[abWord.start])
            queue.append(AbbrWord(newWord, abWord.start+1, 0))

    return result

if __name__ == "__main__":
    print(unique_generalized_abbr("BAT"))
    # print(unique_generalized_abbr("code"))